{"version":3,"sources":["util.tsx","reducers/accountReducer.tsx","actions/accountActionTypes.tsx","reducers/installationReducer.tsx","actions/installationActionTypes.tsx","reducers/rootReducer.tsx","network/network.tsx","actions/installationActions.tsx","components/general/FlexBox.tsx","components/editor/EditorBar.tsx","components/editor/ContentFrame.tsx","components/editor/EditorScreen.tsx","components/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isProduction","process","initialState","loading","error","username","accountReducer","state","action","type","payload","installed","installationReducer","rootReducer","combineReducers","account","installation","BACKEND_URL","request","endpoint","method","data","a","axios","url","response","console","trace","Error","get","fetchInstallationStatusSuccess","status","fetchInstallationStatus","dispatch","network","message","flexBoxStyle","display","FlexBox","children","style","editorBarStyle","backgroundColor","width","EditorBar","contentFrameStyle","flexGrow","iframeStyle","height","ContentFrame","title","src","frameBorder","EditorScreen","RootContent","Root","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.324e362e.chunk.js","sourcesContent":["export const isProduction\n  = () => !process || !process.env || process.env.NODE_ENV !== 'development';\n\nexport const isDevelopment = () => !isProduction();\n\n// eslint-disable-next-line no-alert\nexport const handleUnexpectedError = (error: string) => alert(error);\n","import {\n  AccountActions,\n  LOGIN,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  CREATE_ACCOUNT,\n  CREATE_ACCOUNT_SUCCESS,\n  CREATE_ACCOUNT_FAILURE,\n  LOGOUT,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n} from '../actions/accountActionTypes';\n\nexport interface AccountState {\n  loading: boolean,\n  error: string|null,\n  username: string|null,\n}\n\nconst initialState: AccountState = {\n  loading: false,\n  error: null,\n  username: null,\n};\n\nconst accountReducer = (state = initialState, action: AccountActions): AccountState => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        loading: true,\n        username: null,\n        error: null,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n        loading: false,\n      };\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n    case LOGOUT_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case CREATE_ACCOUNT:\n      return {\n        ...state,\n        loading: true,\n      };\n    case CREATE_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n    case CREATE_ACCOUNT_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default accountReducer;\n","import { Account } from '../types/types';\n\nexport const LOGIN: 'LOGIN' = 'LOGIN';\nexport const LOGIN_SUCCESS: 'LOGIN_SUCCESS' = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE: 'LOGIN_FAILURE' = 'LOGIN_FAILURE';\nexport const LOGOUT: 'LOGOUT' = 'LOGOUT';\nexport const LOGOUT_SUCCESS: 'LOGOUT_SUCCESS' = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE: 'LOGOUT_FAILURE' = 'LOGOUT_FAILURE';\nexport const CREATE_ACCOUNT: 'CREATE_ACCOUNT' = 'CREATE_ACCOUNT';\nexport const CREATE_ACCOUNT_SUCCESS: 'CREATE_ACCOUNT_SUCCESS' = 'CREATE_ACCOUNT_SUCCESS';\nexport const CREATE_ACCOUNT_FAILURE: 'CREATE_ACCOUNT_FAILURE' = 'CREATE_ACCOUNT_FAILURE';\n\nexport interface Login {\n  type: typeof LOGIN,\n}\n\nexport interface LoginSuccess {\n  type: typeof LOGIN_SUCCESS,\n  payload: Account,\n}\n\nexport interface LoginFailure {\n  type: typeof LOGIN_FAILURE,\n  payload: string,\n}\n\nexport interface Logout {\n  type: typeof LOGOUT,\n}\n\nexport interface LogoutSuccess {\n  type: typeof LOGOUT_SUCCESS,\n}\n\nexport interface LogoutFailure {\n  type: typeof LOGOUT_FAILURE,\n  payload: string,\n}\n\nexport interface CreateAccount {\n  type: typeof CREATE_ACCOUNT,\n}\n\nexport interface CreateAccountSuccess {\n  type: typeof CREATE_ACCOUNT_SUCCESS,\n}\n\nexport interface CreateAccountFailure {\n  type: typeof CREATE_ACCOUNT_FAILURE,\n  payload: string,\n}\n\nexport type AccountActions\n  = Login\n  | LoginSuccess\n  | LoginFailure\n  | Logout\n  | LogoutSuccess\n  | LogoutFailure\n  | CreateAccount\n  | CreateAccountSuccess\n  | CreateAccountFailure\n","import {\n  InstallationActions,\n  FETCH_INSTALLATION_STATUS,\n  FETCH_INSTALLATION_STATUS_SUCCESS,\n  FETCH_INSTALLATION_STATUS_FAILURE,\n} from '../actions/installationActionTypes';\n\nexport interface InstallationState {\n  loading: boolean,\n  installed: boolean|null,\n  error: string|null,\n}\n\nconst initialState: InstallationState = {\n  loading: false,\n  installed: null,\n  error: null,\n};\n\nconst installationReducer\n  = (state = initialState, action: InstallationActions): InstallationState => {\n    switch (action.type) {\n      case FETCH_INSTALLATION_STATUS:\n        return {\n          loading: true,\n          installed: null,\n          error: null,\n        };\n      case FETCH_INSTALLATION_STATUS_SUCCESS:\n        return {\n          loading: false,\n          installed: action.payload,\n          error: null,\n        };\n      case FETCH_INSTALLATION_STATUS_FAILURE:\n        return {\n          loading: false,\n          installed: null,\n          error: action.payload,\n        };\n      default:\n        return state;\n    }\n  };\n\nexport default installationReducer;\n","export const FETCH_INSTALLATION_STATUS: 'FETCH_INSTALLATION_STATUS'\n  = 'FETCH_INSTALLATION_STATUS';\nexport const FETCH_INSTALLATION_STATUS_SUCCESS: 'FETCH_INSTALLATION_STATUS_SUCCESS'\n  = 'FETCH_INSTALLATION_STATUS_SUCCESS';\nexport const FETCH_INSTALLATION_STATUS_FAILURE: 'FETCH_INSTALLATION_STATUS_FAILURE'\n  = 'FETCH_INSTALLATION_STATUS_FAILURE';\n\nexport interface FetchInstallationStatus {\n  type: typeof FETCH_INSTALLATION_STATUS,\n}\n\nexport interface FetchInstallationStatusSuccess {\n  type: typeof FETCH_INSTALLATION_STATUS_SUCCESS,\n  payload: boolean,\n}\n\nexport interface FetchInstallationStatusFailure {\n  type: typeof FETCH_INSTALLATION_STATUS_FAILURE,\n  payload: string,\n}\n\nexport type InstallationActions\n  = FetchInstallationStatus\n  | FetchInstallationStatusSuccess\n  | FetchInstallationStatusFailure\n","import { combineReducers } from 'redux';\nimport accountReducer, { AccountState } from './accountReducer';\nimport installationReducer, { InstallationState } from './installationReducer';\n\nexport interface ApplicationState {\n  account: AccountState,\n  installation: InstallationState,\n}\n\nconst rootReducer = combineReducers({\n  account: accountReducer,\n  installation: installationReducer,\n});\n\nexport default rootReducer;\n","import axios from 'axios';\nimport { isProduction } from '../util';\n\nconst BACKEND_URL = isProduction() ? 'backend' : 'http://localhost:8000/backend';\n\ntype Method = 'get' | 'post' | 'put' | 'delete';\n\nconst request = async (endpoint: string, method: Method, data?: any) => {\n  try {\n    return (await axios({\n      method,\n      url: `${BACKEND_URL}/${endpoint}`,\n      data,\n    })).data;\n  } catch (error) {\n    if (!error.response || !error.response.data || !error.response.data.error) {\n      console.trace(error);\n      throw new Error('An unknown error occured.');\n    } else {\n      console.trace(error.response.data.error);\n      throw new Error(error.response.data.error);\n    }\n  }\n};\n\nexport const get = async (endpoint: string) => request(endpoint, 'get');\n\nexport const post = async (endpoint: string, data?: any) => request(endpoint, 'post', data);\n\nexport const put = async (endpoint: string, data?: any) => request(endpoint, 'put', data);\n\nexport const del = async (endpoint: string) => request(endpoint, 'delete');\n","import { Dispatch } from 'react';\nimport {\n  FETCH_INSTALLATION_STATUS_SUCCESS,\n  FETCH_INSTALLATION_STATUS_FAILURE,\n  FETCH_INSTALLATION_STATUS,\n} from './installationActionTypes';\nimport * as network from '../network/network';\n\nconst fetchInstallationStatusSuccess = (status: boolean) => ({\n  type: FETCH_INSTALLATION_STATUS_SUCCESS,\n  payload: status,\n});\n\nconst fetchInstallationStatusFailure = (error: string) => ({\n  type: FETCH_INSTALLATION_STATUS_FAILURE,\n  payload: error,\n});\n\nexport const fetchInstallationStatus = () => async (dispatch: Dispatch<any>) => {\n  dispatch({\n    type: FETCH_INSTALLATION_STATUS,\n  });\n\n  try {\n    dispatch(\n      fetchInstallationStatusSuccess((await network.get('installation/status.php')).installed),\n    );\n  } catch (e) {\n    dispatch(fetchInstallationStatusFailure(e.message));\n  }\n};\n","import React from 'react';\n\nconst flexBoxStyle = {\n  display: 'flex',\n};\n\ninterface FlexBoxProps {\n  children?: React.ReactElement|React.ReactElement[]\n  style: Object\n}\n\nconst FlexBox = ({ children, style }: FlexBoxProps) =>\n  <div style={{ ...flexBoxStyle, ...style }}>{children}</div>;\n\nexport default FlexBox;\n","import React from 'react';\n\nconst editorBarStyle = {\n  backgroundColor: '#2C2C2C',\n  width: 70,\n};\n\nconst EditorBar = () => <div style={editorBarStyle} />;\n\nexport default EditorBar;\n","import React from 'react';\n\nconst contentFrameStyle = {\n  flexGrow: 1,\n};\n\nconst iframeStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nconst ContentFrame = () => (\n  <div style={contentFrameStyle}>\n    <iframe title=\"contentIFrame\" src=\"/\" frameBorder=\"0\" style={iframeStyle} />\n  </div>\n);\n\nexport default ContentFrame;\n","import * as React from 'react';\nimport FlexBox from '../general/FlexBox';\nimport EditorBar from './EditorBar';\nimport ContentFrame from './ContentFrame';\n\nconst flexBoxStyle = {\n  height: '100vh',\n};\n\nconst EditorScreen = () => (\n  <FlexBox style={flexBoxStyle}>\n    <EditorBar />\n    <ContentFrame />\n  </FlexBox>\n);\n\nexport default EditorScreen;\n","import * as React from 'react';\nimport { Provider, useSelector } from 'react-redux';\nimport { Store } from 'redux';\nimport { getInstalled, getLoading } from '../selectors/installationSelectors';\nimport InstallationScreen from './installation/InstallationScreen';\nimport EditorScreen from './editor/EditorScreen';\nimport LoginScreen from './login/LoginScreen';\nimport { getAuthenticated } from '../selectors/accountSelectors';\n\nconst RootContent = () => {\n  return <EditorScreen />;\n  const installed = useSelector(getInstalled);\n  const isInstallationCheckLoading = useSelector(getLoading);\n  const isAuthenticated = useSelector(getAuthenticated);\n\n  if (isInstallationCheckLoading) return <>Loading...</>;\n  if (!installed) return <InstallationScreen />;\n  if (!isAuthenticated) return <LoginScreen />;\n  return <EditorScreen />;\n};\n\nexport const Root = ({ store }: { store: Store<any> }) => (\n  <Provider store={store}>\n    <RootContent />\n  </Provider>\n);\n","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers/rootReducer';\nimport { Root } from './components/Root';\nimport { fetchInstallationStatus } from './actions/installationActions';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nstore.dispatch<any>(fetchInstallationStatus());\n\nconst App: React.FC = () => (\n  <Root store={store} />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}